
test04-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800118  00800118  0000045a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c50  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000984  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052a  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057a  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002b7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	64 c0       	rjmp	.+200    	; 0x10a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	72 c1       	rjmp	.+740    	; 0x3aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int cnt = 0, tcnt = 0;

int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	87 bb       	out	0x17, r24	; 23
	SegPort(&PORTA, &PORTB);
  d0:	68 e3       	ldi	r22, 0x38	; 56
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	8b e3       	ldi	r24, 0x3B	; 59
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	41 d0       	rcall	.+130    	; 0x15c <SegPort>
	SegType(1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	47 d0       	rcall	.+142    	; 0x16e <SegType>

	TIMSK |= 0x01;  // 0000 0001b - Timer 0 TCNT overflow interrupt
  e0:	87 b7       	in	r24, 0x37	; 55
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0x04;  // 0000 0100b - Timer 1 TCNT overflow interrupt (16bit)
	//TIMSK |= 0x40;  // 0100 0001b - Timer 2 TCNT overflow interrupt
	//ETIMSK |= 0x04;  // 0000 0100b - Timer 3 TCNT overflow interrupt (16bit)
	TCCR0 = 0x04;	// 분주비 (Pre-Scaler) 64
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	83 bf       	out	0x33, r24	; 51
	//TCCR1B = 0x04;	// 분주비 (Pre-Scaler) 64
	TCCR2 = 0b00000111;	// 분주비 (Pre-Scaler) 64
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	85 bd       	out	0x25, r24	; 37
	SREG |= 0x80;
  ee:	8f b7       	in	r24, 0x3f	; 63
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8f bf       	out	0x3f, r24	; 63
	sei();
  f4:	78 94       	sei
    while (1) 
    {
		if(cnt >= 0x10000) cnt = 0;
		SegDisp(cnt);
  f6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <cnt>
  fa:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <cnt+0x1>
  fe:	07 2e       	mov	r0, r23
 100:	00 0c       	add	r0, r0
 102:	88 0b       	sbc	r24, r24
 104:	99 0b       	sbc	r25, r25
 106:	a0 d0       	rcall	.+320    	; 0x248 <SegDisp>
 108:	f6 cf       	rjmp	.-20     	; 0xf6 <main+0x2e>

0000010a <__vector_16>:
    }
}
ISR(TIMER0_OVF_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
	tcnt++;
 11a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 11e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 128:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	if(tcnt >= 500)  // 8bit timer 사용시
 12c:	84 3f       	cpi	r24, 0xF4	; 244
 12e:	91 40       	sbci	r25, 0x01	; 1
 130:	6c f0       	brlt	.+26     	; 0x14c <__vector_16+0x42>
	{
		cnt++; tcnt = 0;
 132:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt>
 136:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cnt+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cnt+0x1>
 140:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cnt>
 144:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 148:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
	}
}
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <SegPort>:
	arr[2] = digit[n3];
	arr[3] = digit[n4];
	digitNum = (num > 4095) ? 4 : (num > 256) ? 3 : (num > 16) ? 2 : 1;
	FND_4(arr);
	return arr;
}
 15c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <PA+0x1>
 160:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PA>
 164:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <PB+0x1>
 168:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <PB>
 16c:	08 95       	ret

0000016e <SegType>:
 16e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <segType+0x1>
 172:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <segType>
 176:	08 95       	ret

00000178 <seg>:
 178:	ac 01       	movw	r20, r24
 17a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <segType>
 17e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <segType+0x1>
 182:	89 2b       	or	r24, r25
 184:	01 f1       	breq	.+64     	; 0x1c6 <seg+0x4e>
 186:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PB>
 18a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PB+0x1>
 18e:	80 81       	ld	r24, Z
 190:	8f 60       	ori	r24, 0x0F	; 15
 192:	80 83       	st	Z, r24
 194:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PB>
 198:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PB+0x1>
 19c:	23 e0       	ldi	r18, 0x03	; 3
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	24 1b       	sub	r18, r20
 1a2:	35 0b       	sbc	r19, r21
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <seg+0x36>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	2a 95       	dec	r18
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <seg+0x32>
 1b2:	80 95       	com	r24
 1b4:	90 81       	ld	r25, Z
 1b6:	89 23       	and	r24, r25
 1b8:	80 83       	st	Z, r24
 1ba:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PA>
 1be:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PA+0x1>
 1c2:	60 83       	st	Z, r22
 1c4:	08 95       	ret
 1c6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PB>
 1ca:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PB+0x1>
 1ce:	90 81       	ld	r25, Z
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	90 83       	st	Z, r25
 1d4:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PB>
 1d8:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PB+0x1>
 1dc:	23 e0       	ldi	r18, 0x03	; 3
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	24 1b       	sub	r18, r20
 1e2:	35 0b       	sbc	r19, r21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <seg+0x76>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <seg+0x72>
 1f2:	90 81       	ld	r25, Z
 1f4:	89 2b       	or	r24, r25
 1f6:	80 83       	st	Z, r24
 1f8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PA>
 1fc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PA+0x1>
 200:	60 95       	com	r22
 202:	60 83       	st	Z, r22
 204:	08 95       	ret

00000206 <FND_4>:
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	8c 01       	movw	r16, r24
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	0d c0       	rjmp	.+26     	; 0x230 <FND_4+0x2a>
 216:	f8 01       	movw	r30, r16
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	60 81       	ld	r22, Z
 21e:	ce 01       	movw	r24, r28
 220:	ab df       	rcall	.-170    	; 0x178 <seg>
 222:	8f e1       	ldi	r24, 0x1F	; 31
 224:	9e e4       	ldi	r25, 0x4E	; 78
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <FND_4+0x20>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <FND_4+0x26>
 22c:	00 00       	nop
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	c8 17       	cp	r28, r24
 23a:	d9 07       	cpc	r29, r25
 23c:	64 f3       	brlt	.-40     	; 0x216 <FND_4+0x10>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <SegDisp>:
char* SegDisp(unsigned long num)  // 4321  4 digit 10진수 segment 출력
{
 248:	4f 92       	push	r4
 24a:	5f 92       	push	r5
 24c:	6f 92       	push	r6
 24e:	7f 92       	push	r7
 250:	8f 92       	push	r8
 252:	9f 92       	push	r9
 254:	af 92       	push	r10
 256:	bf 92       	push	r11
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	00 d0       	rcall	.+0      	; 0x266 <SegDisp+0x1e>
 266:	00 d0       	rcall	.+0      	; 0x268 <SegDisp+0x20>
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	6b 01       	movw	r12, r22
 26e:	7c 01       	movw	r14, r24
	int n1 = num % 10;			// 1  : 문자가 아닌 숫자
 270:	0f 2e       	mov	r0, r31
 272:	fa e0       	ldi	r31, 0x0A	; 10
 274:	8f 2e       	mov	r8, r31
 276:	91 2c       	mov	r9, r1
 278:	a1 2c       	mov	r10, r1
 27a:	b1 2c       	mov	r11, r1
 27c:	f0 2d       	mov	r31, r0
 27e:	a5 01       	movw	r20, r10
 280:	94 01       	movw	r18, r8
 282:	71 d0       	rcall	.+226    	; 0x366 <__udivmodsi4>
 284:	69 83       	std	Y+1, r22	; 0x01
 286:	7a 83       	std	Y+2, r23	; 0x02
 288:	8b 83       	std	Y+3, r24	; 0x03
 28a:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 10;	// 2 
 28c:	ca 01       	movw	r24, r20
 28e:	b9 01       	movw	r22, r18
 290:	a5 01       	movw	r20, r10
 292:	94 01       	movw	r18, r8
 294:	68 d0       	rcall	.+208    	; 0x366 <__udivmodsi4>
 296:	2b 01       	movw	r4, r22
 298:	3c 01       	movw	r6, r24
	int n3 = (num / 100 ) % 10;	// 3 
 29a:	c7 01       	movw	r24, r14
 29c:	b6 01       	movw	r22, r12
 29e:	24 e6       	ldi	r18, 0x64	; 100
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	5f d0       	rcall	.+190    	; 0x366 <__udivmodsi4>
 2a8:	ca 01       	movw	r24, r20
 2aa:	b9 01       	movw	r22, r18
 2ac:	a5 01       	movw	r20, r10
 2ae:	94 01       	movw	r18, r8
 2b0:	5a d0       	rcall	.+180    	; 0x366 <__udivmodsi4>
 2b2:	4b 01       	movw	r8, r22
 2b4:	5c 01       	movw	r10, r24
	int n4 = (num / 1000);		// 4 
 2b6:	c7 01       	movw	r24, r14
 2b8:	b6 01       	movw	r22, r12
 2ba:	28 ee       	ldi	r18, 0xE8	; 232
 2bc:	33 e0       	ldi	r19, 0x03	; 3
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	51 d0       	rcall	.+162    	; 0x366 <__udivmodsi4>
	arr[0] = digit[n1];
 2c4:	e9 81       	ldd	r30, Y+1	; 0x01
 2c6:	fa 81       	ldd	r31, Y+2	; 0x02
 2c8:	e8 5f       	subi	r30, 0xF8	; 248
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	80 81       	ld	r24, Z
 2ce:	ec e1       	ldi	r30, 0x1C	; 28
 2d0:	f1 e0       	ldi	r31, 0x01	; 1
 2d2:	80 83       	st	Z, r24
	arr[1] = digit[n2];
 2d4:	d2 01       	movw	r26, r4
 2d6:	a8 5f       	subi	r26, 0xF8	; 248
 2d8:	be 4f       	sbci	r27, 0xFE	; 254
 2da:	8c 91       	ld	r24, X
 2dc:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3];
 2de:	d4 01       	movw	r26, r8
 2e0:	a8 5f       	subi	r26, 0xF8	; 248
 2e2:	be 4f       	sbci	r27, 0xFE	; 254
 2e4:	8c 91       	ld	r24, X
 2e6:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n4];
 2e8:	d9 01       	movw	r26, r18
 2ea:	a8 5f       	subi	r26, 0xF8	; 248
 2ec:	be 4f       	sbci	r27, 0xFE	; 254
 2ee:	8c 91       	ld	r24, X
 2f0:	83 83       	std	Z+3, r24	; 0x03
	digitNum = (num > 999) ? 4 : (num > 99) ? 3 : (num > 9) ? 2 : 1;
 2f2:	88 ee       	ldi	r24, 0xE8	; 232
 2f4:	c8 16       	cp	r12, r24
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	d8 06       	cpc	r13, r24
 2fa:	e1 04       	cpc	r14, r1
 2fc:	f1 04       	cpc	r15, r1
 2fe:	78 f4       	brcc	.+30     	; 0x31e <SegDisp+0xd6>
 300:	84 e6       	ldi	r24, 0x64	; 100
 302:	c8 16       	cp	r12, r24
 304:	d1 04       	cpc	r13, r1
 306:	e1 04       	cpc	r14, r1
 308:	f1 04       	cpc	r15, r1
 30a:	60 f4       	brcc	.+24     	; 0x324 <SegDisp+0xdc>
 30c:	8a e0       	ldi	r24, 0x0A	; 10
 30e:	c8 16       	cp	r12, r24
 310:	d1 04       	cpc	r13, r1
 312:	e1 04       	cpc	r14, r1
 314:	f1 04       	cpc	r15, r1
 316:	48 f0       	brcs	.+18     	; 0x32a <SegDisp+0xe2>
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	08 c0       	rjmp	.+16     	; 0x32e <SegDisp+0xe6>
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	05 c0       	rjmp	.+10     	; 0x32e <SegDisp+0xe6>
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <SegDisp+0xe6>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 332:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	FND_4(arr);
 336:	8c e1       	ldi	r24, 0x1C	; 28
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	65 df       	rcall	.-310    	; 0x206 <FND_4>
	return arr;
}
 33c:	8c e1       	ldi	r24, 0x1C	; 28
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	bf 90       	pop	r11
 356:	af 90       	pop	r10
 358:	9f 90       	pop	r9
 35a:	8f 90       	pop	r8
 35c:	7f 90       	pop	r7
 35e:	6f 90       	pop	r6
 360:	5f 90       	pop	r5
 362:	4f 90       	pop	r4
 364:	08 95       	ret

00000366 <__udivmodsi4>:
 366:	a1 e2       	ldi	r26, 0x21	; 33
 368:	1a 2e       	mov	r1, r26
 36a:	aa 1b       	sub	r26, r26
 36c:	bb 1b       	sub	r27, r27
 36e:	fd 01       	movw	r30, r26
 370:	0d c0       	rjmp	.+26     	; 0x38c <__udivmodsi4_ep>

00000372 <__udivmodsi4_loop>:
 372:	aa 1f       	adc	r26, r26
 374:	bb 1f       	adc	r27, r27
 376:	ee 1f       	adc	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	a2 17       	cp	r26, r18
 37c:	b3 07       	cpc	r27, r19
 37e:	e4 07       	cpc	r30, r20
 380:	f5 07       	cpc	r31, r21
 382:	20 f0       	brcs	.+8      	; 0x38c <__udivmodsi4_ep>
 384:	a2 1b       	sub	r26, r18
 386:	b3 0b       	sbc	r27, r19
 388:	e4 0b       	sbc	r30, r20
 38a:	f5 0b       	sbc	r31, r21

0000038c <__udivmodsi4_ep>:
 38c:	66 1f       	adc	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	1a 94       	dec	r1
 396:	69 f7       	brne	.-38     	; 0x372 <__udivmodsi4_loop>
 398:	60 95       	com	r22
 39a:	70 95       	com	r23
 39c:	80 95       	com	r24
 39e:	90 95       	com	r25
 3a0:	9b 01       	movw	r18, r22
 3a2:	ac 01       	movw	r20, r24
 3a4:	bd 01       	movw	r22, r26
 3a6:	cf 01       	movw	r24, r30
 3a8:	08 95       	ret

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
