
test04-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800116  00800116  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b59  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000984  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000463  00000000  00000000  00001901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000459  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bf  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	63 c0       	rjmp	.+198    	; 0x100 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 31       	cpi	r26, 0x1F	; 31
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	f2 c0       	rjmp	.+484    	; 0x2aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int cnt = 0, tcnt = 0;

int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	87 bb       	out	0x17, r24	; 23
	SegPort(&PORTA, &PORTB);
  d0:	68 e3       	ldi	r22, 0x38	; 56
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	8b e3       	ldi	r24, 0x3B	; 59
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2e d0       	rcall	.+92     	; 0x136 <SegPort>

//	TIMSK |= 0x01;  // 0000 0001b - Timer 0 TCNT overflow interrupt
	TIMSK |= 0x04;  // 0000 0100b - Timer 1 TCNT overflow interrupt (16bit)
  da:	87 b7       	in	r24, 0x37	; 55
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	87 bf       	out	0x37, r24	; 55
//	TIMSK |= 0x40;  // 0100 0001b - Timer 2 TCNT overflow interrupt
//	TCCR0 = 0x04;	// 분주비 (Pre-Scaler) 64
	TCCR1B = 0x04;	// 분주비 (Pre-Scaler) 64
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	8e bd       	out	0x2e, r24	; 46
//	TCCR2 = 0x04;	// 분주비 (Pre-Scaler) 64
	SREG |= 0x80;
  e4:	8f b7       	in	r24, 0x3f	; 63
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8f bf       	out	0x3f, r24	; 63
	sei();
  ea:	78 94       	sei
    while (1) 
    {
		if(cnt >= 0x10000) cnt = 0;
		SegDisp(cnt);
  ec:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <cnt>
  f0:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <cnt+0x1>
  f4:	07 2e       	mov	r0, r23
  f6:	00 0c       	add	r0, r0
  f8:	88 0b       	sbc	r24, r24
  fa:	99 0b       	sbc	r25, r25
  fc:	66 d0       	rcall	.+204    	; 0x1ca <SegDisp>
  fe:	f6 cf       	rjmp	.-20     	; 0xec <main+0x24>

00000100 <__vector_14>:
    }
}
ISR(TIMER1_OVF_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	tcnt++;
	//if(tcnt >= 100)
	{
		cnt++; tcnt = 0;
 10e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <cnt>
 112:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cnt+0x1>
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <cnt+0x1>
 11c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <cnt>
 120:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 124:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
	}
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <SegPort>:
char arr[5]; // 세그먼트 이미지 정보를 담을 안전 영역
char *PA = &PORTB, *PB = &PORTC;

void SegPort(char *p1, char *p2)
{	
	PA = p1; PB = p2;
 136:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PA+0x1>
 13a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PA>
 13e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PB+0x1>
 142:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PB>
 146:	08 95       	ret

00000148 <seg>:
}
void seg(int sel, uint8_t c)
{
	*PB |= 0X0F;
 148:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 14c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 150:	20 81       	ld	r18, Z
 152:	2f 60       	ori	r18, 0x0F	; 15
 154:	20 83       	st	Z, r18
	*PB &= ~(1 << (3-sel));
 156:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 15a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 15e:	23 e0       	ldi	r18, 0x03	; 3
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	28 1b       	sub	r18, r24
 164:	39 0b       	sbc	r19, r25
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <seg+0x28>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <seg+0x24>
 174:	80 95       	com	r24
 176:	90 81       	ld	r25, Z
 178:	89 23       	and	r24, r25
 17a:	80 83       	st	Z, r24
	*PA = c;		// 숫자 데이터 출력
 17c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PA>
 180:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PA+0x1>
 184:	60 83       	st	Z, r22
 186:	08 95       	ret

00000188 <FND_4>:
	//_delay_us(1);	// 0.01 초 간격으로 전환
}

int sm = 4;
void FND_4(char *inf) // segment Image 배열
{
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	8c 01       	movw	r16, r24
	int i;
	for(i = 0;i < sm;i++)
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	0d c0       	rjmp	.+26     	; 0x1b2 <FND_4+0x2a>
	{
		seg(i, *(inf+i));
 198:	f8 01       	movw	r30, r16
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	60 81       	ld	r22, Z
 1a0:	ce 01       	movw	r24, r28
 1a2:	d2 df       	rcall	.-92     	; 0x148 <seg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	9e e4       	ldi	r25, 0x4E	; 78
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <FND_4+0x20>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <FND_4+0x26>
 1ae:	00 00       	nop

int sm = 4;
void FND_4(char *inf) // segment Image 배열
{
	int i;
	for(i = 0;i < sm;i++)
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ba:	c8 17       	cp	r28, r24
 1bc:	d9 07       	cpc	r29, r25
 1be:	64 f3       	brlt	.-40     	; 0x198 <FND_4+0x10>
	{
		seg(i, *(inf+i));
		_delay_ms(5);
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <SegDisp>:

char* SegDisp(unsigned long num)  // 10진 정수 ==> 16진수 문자열 : 56506 ==> 0xDCBA
								//		   ==> 4 digit 16진수 segment 출력
{
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
	num %= 65536;
 1d6:	8b 01       	movw	r16, r22
 1d8:	9c 01       	movw	r18, r24
 1da:	22 27       	eor	r18, r18
 1dc:	33 27       	eor	r19, r19
	int n1 = num % 16;			// A (10) : 문자가 아닌 숫자
 1de:	6f 70       	andi	r22, 0x0F	; 15
 1e0:	77 27       	eor	r23, r23
	int n2 = (num / 16) % 16;	// B (11)
 1e2:	d9 01       	movw	r26, r18
 1e4:	c8 01       	movw	r24, r16
 1e6:	68 94       	set
 1e8:	13 f8       	bld	r1, 3
 1ea:	b6 95       	lsr	r27
 1ec:	a7 95       	ror	r26
 1ee:	97 95       	ror	r25
 1f0:	87 95       	ror	r24
 1f2:	16 94       	lsr	r1
 1f4:	d1 f7       	brne	.-12     	; 0x1ea <SegDisp+0x20>
 1f6:	ec 01       	movw	r28, r24
 1f8:	cf 70       	andi	r28, 0x0F	; 15
 1fa:	dd 27       	eor	r29, r29
	int n3 = (num / 256 ) % 16;	// C (12)
 1fc:	bb 27       	eor	r27, r27
 1fe:	a3 2f       	mov	r26, r19
 200:	92 2f       	mov	r25, r18
 202:	81 2f       	mov	r24, r17
 204:	7c 01       	movw	r14, r24
 206:	4f e0       	ldi	r20, 0x0F	; 15
 208:	e4 22       	and	r14, r20
 20a:	ff 24       	eor	r15, r15
	int n4 = (num / 4096);		// D (13)
 20c:	d9 01       	movw	r26, r18
 20e:	c8 01       	movw	r24, r16
 210:	07 2e       	mov	r0, r23
 212:	7c e0       	ldi	r23, 0x0C	; 12
 214:	b6 95       	lsr	r27
 216:	a7 95       	ror	r26
 218:	97 95       	ror	r25
 21a:	87 95       	ror	r24
 21c:	7a 95       	dec	r23
 21e:	d1 f7       	brne	.-12     	; 0x214 <SegDisp+0x4a>
 220:	70 2d       	mov	r23, r0
	arr[0] = digit[n1];
 222:	6a 5f       	subi	r22, 0xFA	; 250
 224:	7e 4f       	sbci	r23, 0xFE	; 254
 226:	fb 01       	movw	r30, r22
 228:	60 81       	ld	r22, Z
 22a:	4a e1       	ldi	r20, 0x1A	; 26
 22c:	51 e0       	ldi	r21, 0x01	; 1
 22e:	fa 01       	movw	r30, r20
 230:	60 83       	st	Z, r22
	arr[1] = digit[n2];
 232:	ca 5f       	subi	r28, 0xFA	; 250
 234:	de 4f       	sbci	r29, 0xFE	; 254
 236:	68 81       	ld	r22, Y
 238:	61 83       	std	Z+1, r22	; 0x01
	arr[2] = digit[n3];
 23a:	f7 01       	movw	r30, r14
 23c:	ea 5f       	subi	r30, 0xFA	; 250
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	60 81       	ld	r22, Z
 242:	fa 01       	movw	r30, r20
 244:	62 83       	std	Z+2, r22	; 0x02
	arr[3] = digit[n4];
 246:	fc 01       	movw	r30, r24
 248:	ea 5f       	subi	r30, 0xFA	; 250
 24a:	fe 4f       	sbci	r31, 0xFE	; 254
 24c:	80 81       	ld	r24, Z
 24e:	fa 01       	movw	r30, r20
 250:	83 83       	std	Z+3, r24	; 0x03
	sm = (num > 4095) ? 4 : (num > 256) ? 3 : (num > 16) ? 2 : 1;
 252:	01 15       	cp	r16, r1
 254:	f0 e1       	ldi	r31, 0x10	; 16
 256:	1f 07       	cpc	r17, r31
 258:	21 05       	cpc	r18, r1
 25a:	31 05       	cpc	r19, r1
 25c:	70 f4       	brcc	.+28     	; 0x27a <SegDisp+0xb0>
 25e:	01 30       	cpi	r16, 0x01	; 1
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	14 07       	cpc	r17, r20
 264:	21 05       	cpc	r18, r1
 266:	31 05       	cpc	r19, r1
 268:	58 f4       	brcc	.+22     	; 0x280 <SegDisp+0xb6>
 26a:	01 31       	cpi	r16, 0x11	; 17
 26c:	11 05       	cpc	r17, r1
 26e:	21 05       	cpc	r18, r1
 270:	31 05       	cpc	r19, r1
 272:	48 f0       	brcs	.+18     	; 0x286 <SegDisp+0xbc>
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	08 c0       	rjmp	.+16     	; 0x28a <SegDisp+0xc0>
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	05 c0       	rjmp	.+10     	; 0x28a <SegDisp+0xc0>
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <SegDisp+0xc0>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	FND_4(arr);
 292:	8a e1       	ldi	r24, 0x1A	; 26
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	78 df       	rcall	.-272    	; 0x188 <FND_4>
	return arr;
}
 298:	8a e1       	ldi	r24, 0x1A	; 26
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
