
test03-intr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000338  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  000003de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c92  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009da  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054d  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000433  00000000  00000000  000025e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c1       	rjmp	.+646    	; 0x29c <__vector_5>
  16:	00 00       	nop
  18:	62 c1       	rjmp	.+708    	; 0x2de <__vector_6>
  1a:	00 00       	nop
  1c:	81 c1       	rjmp	.+770    	; 0x320 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d0       	rcall	.+334    	; 0x212 <main>
  c4:	37 c1       	rjmp	.+622    	; 0x334 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
uint8_t digit[] = {0x3F, 0X06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7c, 0x58, 0x5e, 0x79, 0x71 };
char arr[5]; // 세그먼트 이미지 정보를 담을 안전 영역

void seg(int sel, uint8_t c)
{
	PORTB |= 0X0F;
  c8:	28 b3       	in	r18, 0x18	; 24
  ca:	2f 60       	ori	r18, 0x0F	; 15
  cc:	28 bb       	out	0x18, r18	; 24
	PORTB &= ~(1 << (3-sel));
  ce:	28 b3       	in	r18, 0x18	; 24
  d0:	43 e0       	ldi	r20, 0x03	; 3
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	48 1b       	sub	r20, r24
  d6:	59 0b       	sbc	r21, r25
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <seg+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	4a 95       	dec	r20
  e4:	e2 f7       	brpl	.-8      	; 0xde <seg+0x16>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	88 bb       	out	0x18, r24	; 24
	PORTA = c;		// 숫자 데이터 출력
  ec:	6b bb       	out	0x1b, r22	; 27
  ee:	08 95       	ret

000000f0 <FND_4>:
	//_delay_us(1);	// 0.01 초 간격으로 전환
}

int sm = 4;
void FND_4(char *inf) // segment Image 배열
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8c 01       	movw	r16, r24
	int i;
	for(i = 0;i < sm;i++)
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	0d c0       	rjmp	.+26     	; 0x11a <FND_4+0x2a>
	{
		seg(i, *(inf+i));
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	60 81       	ld	r22, Z
 108:	ce 01       	movw	r24, r28
 10a:	de df       	rcall	.-68     	; 0xc8 <seg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	9e e4       	ldi	r25, 0x4E	; 78
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <FND_4+0x20>
 114:	00 c0       	rjmp	.+0      	; 0x116 <FND_4+0x26>
 116:	00 00       	nop

int sm = 4;
void FND_4(char *inf) // segment Image 배열
{
	int i;
	for(i = 0;i < sm;i++)
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	c8 17       	cp	r28, r24
 124:	d9 07       	cpc	r29, r25
 126:	64 f3       	brlt	.-40     	; 0x100 <FND_4+0x10>
	{
		seg(i, *(inf+i));
		_delay_ms(5);
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <Disp>:

char* Disp(unsigned long num)  // 10진 정수 ==> 16진수 문자열 : 56506 ==> 0xDCBA
								//		   ==> 4 digit 16진수 segment 출력
{
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
	num %= 65536;
 13e:	8b 01       	movw	r16, r22
 140:	9c 01       	movw	r18, r24
 142:	22 27       	eor	r18, r18
 144:	33 27       	eor	r19, r19
	int n1 = num % 16;			// A (10) : 문자가 아닌 숫자
 146:	6f 70       	andi	r22, 0x0F	; 15
 148:	77 27       	eor	r23, r23
	int n2 = (num / 16) % 16;	// B (11)
 14a:	d9 01       	movw	r26, r18
 14c:	c8 01       	movw	r24, r16
 14e:	68 94       	set
 150:	13 f8       	bld	r1, 3
 152:	b6 95       	lsr	r27
 154:	a7 95       	ror	r26
 156:	97 95       	ror	r25
 158:	87 95       	ror	r24
 15a:	16 94       	lsr	r1
 15c:	d1 f7       	brne	.-12     	; 0x152 <Disp+0x20>
 15e:	ec 01       	movw	r28, r24
 160:	cf 70       	andi	r28, 0x0F	; 15
 162:	dd 27       	eor	r29, r29
	int n3 = (num / 256 ) % 16;	// C (12)
 164:	bb 27       	eor	r27, r27
 166:	a3 2f       	mov	r26, r19
 168:	92 2f       	mov	r25, r18
 16a:	81 2f       	mov	r24, r17
 16c:	7c 01       	movw	r14, r24
 16e:	4f e0       	ldi	r20, 0x0F	; 15
 170:	e4 22       	and	r14, r20
 172:	ff 24       	eor	r15, r15
	int n4 = (num / 4096);		// D (13)
 174:	d9 01       	movw	r26, r18
 176:	c8 01       	movw	r24, r16
 178:	07 2e       	mov	r0, r23
 17a:	7c e0       	ldi	r23, 0x0C	; 12
 17c:	b6 95       	lsr	r27
 17e:	a7 95       	ror	r26
 180:	97 95       	ror	r25
 182:	87 95       	ror	r24
 184:	7a 95       	dec	r23
 186:	d1 f7       	brne	.-12     	; 0x17c <Disp+0x4a>
 188:	70 2d       	mov	r23, r0
	arr[0] = digit[n1];
 18a:	6e 5f       	subi	r22, 0xFE	; 254
 18c:	7e 4f       	sbci	r23, 0xFE	; 254
 18e:	fb 01       	movw	r30, r22
 190:	60 81       	ld	r22, Z
 192:	46 e1       	ldi	r20, 0x16	; 22
 194:	51 e0       	ldi	r21, 0x01	; 1
 196:	fa 01       	movw	r30, r20
 198:	60 83       	st	Z, r22
	arr[1] = digit[n2];
 19a:	ce 5f       	subi	r28, 0xFE	; 254
 19c:	de 4f       	sbci	r29, 0xFE	; 254
 19e:	68 81       	ld	r22, Y
 1a0:	61 83       	std	Z+1, r22	; 0x01
	arr[2] = digit[n3];
 1a2:	f7 01       	movw	r30, r14
 1a4:	ee 5f       	subi	r30, 0xFE	; 254
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	60 81       	ld	r22, Z
 1aa:	fa 01       	movw	r30, r20
 1ac:	62 83       	std	Z+2, r22	; 0x02
	arr[3] = digit[n4];
 1ae:	fc 01       	movw	r30, r24
 1b0:	ee 5f       	subi	r30, 0xFE	; 254
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	80 81       	ld	r24, Z
 1b6:	fa 01       	movw	r30, r20
 1b8:	83 83       	std	Z+3, r24	; 0x03
	sm = (num > 4095) ? 4 : (num > 256) ? 3 : (num > 16) ? 2 : 1;
 1ba:	01 15       	cp	r16, r1
 1bc:	f0 e1       	ldi	r31, 0x10	; 16
 1be:	1f 07       	cpc	r17, r31
 1c0:	21 05       	cpc	r18, r1
 1c2:	31 05       	cpc	r19, r1
 1c4:	70 f4       	brcc	.+28     	; 0x1e2 <Disp+0xb0>
 1c6:	01 30       	cpi	r16, 0x01	; 1
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	14 07       	cpc	r17, r20
 1cc:	21 05       	cpc	r18, r1
 1ce:	31 05       	cpc	r19, r1
 1d0:	58 f4       	brcc	.+22     	; 0x1e8 <Disp+0xb6>
 1d2:	01 31       	cpi	r16, 0x11	; 17
 1d4:	11 05       	cpc	r17, r1
 1d6:	21 05       	cpc	r18, r1
 1d8:	31 05       	cpc	r19, r1
 1da:	48 f0       	brcs	.+18     	; 0x1ee <Disp+0xbc>
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <Disp+0xc0>
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <Disp+0xc0>
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Disp+0xc0>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	FND_4(arr);
 1fa:	86 e1       	ldi	r24, 0x16	; 22
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	78 df       	rcall	.-272    	; 0xf0 <FND_4>
	return arr;
}
 200:	86 e1       	ldi	r24, 0x16	; 22
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	08 95       	ret

00000212 <main>:
    /* Replace with your application code */
	// 7-Segment 사용 : 4 Module - C type
	//    Pin assign :  PAx - Segment img,  PBx - module sel
	// Interrupt 사용 : INT4 ~ INT6 (Ext Int)
	//    Pin assign :   PE4 ~ PE6
	DDRA = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	87 bb       	out	0x17, r24	; 23

	//  인터럽트 설정
	EIMSK = 0x70;	// 0111 0000b
 21a:	80 e7       	ldi	r24, 0x70	; 112
 21c:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2a;	// 0010 1010b
 21e:	8a e2       	ldi	r24, 0x2A	; 42
 220:	8a bf       	out	0x3a, r24	; 58
	SREG |= 0x80;	// status Register - 인터럽트 허용
 222:	8f b7       	in	r24, 0x3f	; 63
 224:	80 68       	ori	r24, 0x80	; 128
 226:	8f bf       	out	0x3f, r24	; 63
	sei();			// set interrupt - 인터럽트 시작
 228:	78 94       	sei
	
	long t = 0;
 22a:	c1 2c       	mov	r12, r1
 22c:	d1 2c       	mov	r13, r1
 22e:	76 01       	movw	r14, r12
    while (1) 
    {
		switch(opmode)
 230:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 234:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 238:	00 97       	sbiw	r24, 0x00	; 0
 23a:	41 f0       	breq	.+16     	; 0x24c <main+0x3a>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	49 f4       	brne	.+18     	; 0x252 <main+0x40>
		{
			case 0:	// reset & wait
				t = 0; break;
			case 1: // counter start
				t++; break;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	c8 1a       	sub	r12, r24
 244:	d8 0a       	sbc	r13, r24
 246:	e8 0a       	sbc	r14, r24
 248:	f8 0a       	sbc	r15, r24
 24a:	03 c0       	rjmp	.+6      	; 0x252 <main+0x40>
    while (1) 
    {
		switch(opmode)
		{
			case 0:	// reset & wait
				t = 0; break;
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
 250:	76 01       	movw	r14, r12
				t++; break;
			case 2: // count stop
				break;
			default: break;			
		}
		Disp(t);
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	6d df       	rcall	.-294    	; 0x132 <Disp>
 258:	85 ea       	ldi	r24, 0xA5	; 165
 25a:	9e e0       	ldi	r25, 0x0E	; 14
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x4a>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x50>
 262:	00 00       	nop
		_delay_ms(15);
		Disp(t);
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	64 df       	rcall	.-312    	; 0x132 <Disp>
 26a:	85 ea       	ldi	r24, 0xA5	; 165
 26c:	9e e0       	ldi	r25, 0x0E	; 14
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x5c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x62>
 274:	00 00       	nop
		_delay_ms(15);
		Disp(t);
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	5b df       	rcall	.-330    	; 0x132 <Disp>
 27c:	85 ea       	ldi	r24, 0xA5	; 165
 27e:	9e e0       	ldi	r25, 0x0E	; 14
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0x6e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x74>
		_delay_ms(15);
		Disp(t);
 286:	00 00       	nop
 288:	c7 01       	movw	r24, r14
 28a:	b6 01       	movw	r22, r12
 28c:	52 df       	rcall	.-348    	; 0x132 <Disp>
 28e:	81 eb       	ldi	r24, 0xB1	; 177
 290:	9c e0       	ldi	r25, 0x0C	; 12
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <main+0x80>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x86>
 298:	00 00       	nop
 29a:	ca cf       	rjmp	.-108    	; 0x230 <main+0x1e>

0000029c <__vector_5>:
		_delay_ms(13);
    }
}
ISR(INT4_vect) // INT4 인터럽트 처리 루틴 : sw1
{	
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
	opmode++;
 2aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2ae:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <opmode+0x1>
 2b8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <opmode>
	if(opmode >= OPMODEMAX) opmode = 0;
 2bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opmode>
 2c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opmode+0x1>
 2c4:	03 97       	sbiw	r24, 0x03	; 3
 2c6:	24 f0       	brlt	.+8      	; 0x2d0 <__vector_5+0x34>
 2c8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opmode+0x1>
 2cc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opmode>
}
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_6>:
ISR(INT5_vect) // INT5 인터럽트 처리 루틴 : sw2
{	
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
	state++;
 2ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2f0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 2fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(state >= STATE_MAX) state = 0;
 2fe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 302:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 306:	03 97       	sbiw	r24, 0x03	; 3
 308:	24 f0       	brlt	.+8      	; 0x312 <__vector_6+0x34>
 30a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 30e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
}
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_7>:
ISR(INT6_vect) // INT6 인터럽트 처리 루틴 : sw3
{	
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
	
}
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
